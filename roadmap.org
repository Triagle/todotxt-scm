#+TITLE: Roadmap

A roadmap of the features I wish to have at some point.
* Features
** Tasks
- [X] Show stagnant tasks that haven't been completed recently
  - Could be helpful to identify the types of tasks you don't completed
  - Shouldn't be too difficult to implement in theory
- [X] Allow for n-order sorting
  - Basically means sorting by priority and then due date if priority is
    unavailable
- [ ] Dumb print when piping to other programs.
  - Currently piped output is not stripped of it's colour, which hampers it when
    piping to other programs. Probably shouldn't do that.
- [ ] Retain typed input order
  - Not sure how useful this is? idk but nice to have
- [X] Allow broader selection of tasks than simply ids
  - E.g =todo rm +world= to remove all tasks in the world project
- [X] Allow task revival
  - Basically let the user bring done tasks back into the main list
  - It's easy to do, and adds usability by providing a simple undo button
- [X] Add recently completed tasks commands
  - Show a list of tasks that were recently completed
  - Will require some tweaking to the =done= subcommand to automatically add dates
    to tasks on completion
- [ ] A command switch to specify where to source tasks from
  - If all subcommands are operating on a file, then it may be as easy as adding
    a =-f= option to the =define-opt= macro.
  - May require some thought to be implemented properly
** UI
- [X] Tree output
  - Prints tasks as a tree output like the =tree= command
    #+BEGIN_EXAMPLE
      .
      ├── GTD
      │   └──  1 weekly review recur:1 +gtd
      ├── 2 (C) Get milk @shops
      ├── 3 (D) Take out trash @home
      └── Todo.txt-scm
          ├── 4 (A) Blocking tasks +todo.txt-scm
          └── 5 (B) Tree output +todo.txt-scm
    #+END_EXAMPLE
- [X] Highlighted output
  - Prints tasks as highlighted output like the original todo.txt client
  - Something like the terminal output
    in[[http://todotxt.com/images/todotxt-apps_lrg.png][ this screenshot]]
* Enhancements
Not features, but improve the stability/presentation/etc... of the project.
- [ ] Unit test the parser
  - Is there even a unit test library for chicken scheme?
- [ ] Cool logo
  - The terminal screenshot is fairly unreadable
* Graveyard
- Blocking tasks
  - Similar to blocking tasks in taskwarrior, in that certain tasks can block the completion of
    another
  - Might not actually be possible in hindsight. As I cannot make any guarantees
    about the id of any given task, a blocking task might
    accidentally reference a task that no longer exists. This is a similar
    problem to managing pointers in C.
